# coding: utf-8

"""
    User Management Microservice

    User Management Microservice  # noqa: E501

    The version of the OpenAPI document: v1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from user_management_client_v1.configuration import Configuration


class Error(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cause': 'str',
        'message': 'str',
        'json_path': 'str',
        'validator': 'str',
        'validator_value': 'str'
    }

    attribute_map = {
        'cause': 'cause',
        'message': 'message',
        'json_path': 'jsonPath',
        'validator': 'validator',
        'validator_value': 'validatorValue'
    }

    def __init__(self, cause=None, message=None, json_path=None, validator=None, validator_value=None, local_vars_configuration=None):  # noqa: E501
        """Error - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cause = None
        self._message = None
        self._json_path = None
        self._validator = None
        self._validator_value = None
        self.discriminator = None

        if cause is not None:
            self.cause = cause
        self.message = message
        if json_path is not None:
            self.json_path = json_path
        if validator is not None:
            self.validator = validator
        if validator_value is not None:
            self.validator_value = validator_value

    @property
    def cause(self):
        """Gets the cause of this Error.  # noqa: E501

        If the error was caused by a non-validation error, the exception object will be here.  # noqa: E501

        :return: The cause of this Error.  # noqa: E501
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this Error.

        If the error was caused by a non-validation error, the exception object will be here.  # noqa: E501

        :param cause: The cause of this Error.  # noqa: E501
        :type: str
        """

        self._cause = cause

    @property
    def message(self):
        """Gets the message of this Error.  # noqa: E501

        A human readable message explaining the error.  # noqa: E501

        :return: The message of this Error.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        A human readable message explaining the error.  # noqa: E501

        :param message: The message of this Error.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def json_path(self):
        """Gets the json_path of this Error.  # noqa: E501

        A JSON path to the offending element within the instance.  # noqa: E501

        :return: The json_path of this Error.  # noqa: E501
        :rtype: str
        """
        return self._json_path

    @json_path.setter
    def json_path(self, json_path):
        """Sets the json_path of this Error.

        A JSON path to the offending element within the instance.  # noqa: E501

        :param json_path: The json_path of this Error.  # noqa: E501
        :type: str
        """

        self._json_path = json_path

    @property
    def validator(self):
        """Gets the validator of this Error.  # noqa: E501

        The name of the failed keyword  # noqa: E501

        :return: The validator of this Error.  # noqa: E501
        :rtype: str
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this Error.

        The name of the failed keyword  # noqa: E501

        :param validator: The validator of this Error.  # noqa: E501
        :type: str
        """

        self._validator = validator

    @property
    def validator_value(self):
        """Gets the validator_value of this Error.  # noqa: E501

        The associated value for the failed keyword in the schema.  # noqa: E501

        :return: The validator_value of this Error.  # noqa: E501
        :rtype: str
        """
        return self._validator_value

    @validator_value.setter
    def validator_value(self, validator_value):
        """Sets the validator_value of this Error.

        The associated value for the failed keyword in the schema.  # noqa: E501

        :param validator_value: The validator_value of this Error.  # noqa: E501
        :type: str
        """

        self._validator_value = validator_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Error):
            return True

        return self.to_dict() != other.to_dict()
